"use strict";
/**
 * Copyright 2019, Danang Galuh Tegar Prasetyo.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
exports.Table = void 0;
var lodash_isboolean_1 = __importDefault(require("lodash.isboolean"));
var lodash_isnumber_1 = __importDefault(require("lodash.isnumber"));
var lodash_isstring_1 = __importDefault(require("lodash.isstring"));
var TableDelete_1 = __importDefault(require("./TableDelete"));
var TableInsert_1 = __importDefault(require("./TableInsert"));
var TableSelect_1 = __importDefault(require("./TableSelect"));
var TableUpdate_1 = __importDefault(require("./TableUpdate"));
var Table = /** @class */ (function () {
    function Table(schema, xTable) {
        this.schema = schema;
        this.xTable = xTable;
    }
    Table.createConditionString = function (condition) {
        var conditionString = '';
        if (lodash_isstring_1["default"](condition)) {
            conditionString = condition;
        }
        else if (lodash_isboolean_1["default"](condition)) {
            conditionString = condition.toString();
        }
        else {
            var firstCondition = true;
            for (var key in condition) {
                if (condition.hasOwnProperty(key)) {
                    var value = lodash_isnumber_1["default"](condition[key]) || lodash_isboolean_1["default"](condition[key]) ? condition[key].toString() : "\"" + condition[key] + "\"";
                    conditionString = conditionString
                        .concat(firstCondition ? '' : '  & ')
                        .concat(key)
                        .concat('=')
                        .concat(value);
                    if (firstCondition) {
                        firstCondition = false;
                    }
                }
            }
        }
        return conditionString;
    };
    Table.prototype.getClient = function () {
        return this.schema.getClient();
    };
    Table.prototype.getSession = function () {
        return this.schema.getSession();
    };
    Table.prototype.getSchema = function () {
        return this.schema;
    };
    Table.prototype.getXTable = function () {
        return this.xTable;
    };
    Table.prototype.count = function () {
        return __awaiter(this, void 0, void 0, function () {
            var error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.xTable.count()];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2:
                        error_1 = _a.sent();
                        throw error_1;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    Table.prototype["delete"] = function (condition) {
        if (condition === void 0) { condition = true; }
        try {
            var conditionString = Table.createConditionString(condition);
            var xTableRemove = this.xTable["delete"](conditionString);
            return new TableDelete_1["default"](this, xTableRemove);
        }
        catch (error) {
            throw error;
        }
    };
    Table.prototype.existsInDatabase = function () {
        return __awaiter(this, void 0, void 0, function () {
            var error_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.xTable.existsInDatabase()];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2:
                        error_2 = _a.sent();
                        throw error_2;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    Table.prototype.getName = function () {
        return this.xTable.getName();
    };
    Table.prototype.insert = function () {
        var _a;
        var fields = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            fields[_i] = arguments[_i];
        }
        try {
            var xTableInsert = (_a = this.xTable).insert.apply(_a, fields);
            return new TableInsert_1["default"](this, xTableInsert);
        }
        catch (error) {
            throw error;
        }
    };
    Table.prototype.inspect = function () {
        return this.xTable.inspect();
    };
    Table.prototype.isView = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.xTable.isView()];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    Table.prototype.select = function () {
        var _a;
        var fields = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            fields[_i] = arguments[_i];
        }
        try {
            var xTableSelect = (_a = this.xTable).select.apply(_a, fields);
            return new TableSelect_1["default"](this, xTableSelect);
        }
        catch (error) {
            throw error;
        }
    };
    Table.prototype.update = function (condition) {
        try {
            var conditionString = condition !== void 0 ? Table.createConditionString(condition) : condition;
            var xTableUpdate = this.xTable.modify(conditionString);
            return new TableUpdate_1["default"](this, xTableUpdate);
        }
        catch (error) {
            throw error;
        }
    };
    return Table;
}());
exports.Table = Table;
exports["default"] = Table;
//# sourceMappingURL=Table.js.map